2015-05-06 Wednesday
[state]
ok wow, head is spinning a little bit. You could first of all git diff the code and see all what's been changed. Bottom line is I just got it so that when user clicks to checkout with paypal we dish off to the new AuthorizationSetupsController where we create a new auth setup + response, save this response to the db by marking each tote_item with it and dish off to paypal for authentication / checkout. What's next is we need to flesh out the functionality on Authorization#new controller. This page is going to show the toteitems again along with maybe some text like “confirm that you authorize Farmer's Cellar to charge your credit card if and when your products are delivered” along with a confirm button.



2015-05-07 Thursday
[state]
ok, to begin with do a git status to see what's been worked on. Short version is I'm doing a deep dive on the auth/capture feature, not breadth. If you want to see where in the game we are, on the linux box there's an unsaved libreoffice doc with the sequence laid out. The yellow-highlighted stuff at the bottom of the file is what remains to be done. Also, in authorizations_controller.rb there's a bunch of comments that represent a list of TODOs. After doing this stuff I need to consider how to do captures. I especially need to flesh out the part where I do multiple captures on a single authorization.

2015-05-08 Friday
[state]
ok, today was lame cause I spent over 4 hours running up to everett to extend court date. Ugh. Anyway, today I accomplished adding more columns to the authorizations table and sucking values from the pp auth response to populate these new columns. If you do a “select * from authorizations” you'll see one row and you can go to sandbox account for davideltonhall-facilitator@gmail.com and see the auth there. The transaction_id even matches between our db and what's displayed on the most recent auth. So a person can browse, add to tote, checkout and authorize and see a “congrats” page. This is the tip of the spear. I think the best thing to do on monday is check in all the code. Then, the game plan going forward is to carry on with the payments feature path on in to the admin features to handle order filling and payments capture. The reason is because these admin features will probably drive model/db schema/layout and I don't want to build the rest of the user features only later to realize I need to make significant model changes that break all my work. The admin will log in and process all of farmer bob's apples first. So he'll pull up a list of all tote_items with successful auths in datetime order. Each toteitem row should have an unchecked checkbox under a “Filled” column. The sorter puts a check in the box for each order he fills. When done he hits a 'save' button marking each toteitem as FILLED. When done with farmer bob's apples he moves on to farmer john's oranges and does the same process. When all done with this he goes to a 'capture payments' page or something. Here he sees a list of all filled toteitems about to be charged, sorted by user with a subtotal for each user and a total for the batch. It might be good to show all users' toteitems and have some visual distinction between the filled and the unfilled. We'll also need to plug notifications in to this and void unused portions of authorizations. Notifications will go out “right now” for customers who had toteitems not filled. Delivery notifications will, of course, need to go out upon delivery.

-the plan is to carry on with the payments feature path on in to the admin features to handle order filling, payments capture and notifications. The reason is because these admin features will probably drive model/db schema/layout and I don't want to build the rest of the user features only later to realize I need to make significant model changes that break all my work.

[state]
capture tool on paypal sandbox looks great. If I select an auth and click 'capture' Im taken to a page that shows some kind of auth id number. I want to see that this is the same number I get in the auth response from paypal via rails. Pick up here by verifying same.

2015-05-09
this log file needs to be used for "where are we?", "how did we get here?" and "what's the next step?" no longer use radar file for this information.

2015-05-11
[state]
\milepost.txt documents the features mentioned in 5/8's state, "The admin will log in and process all of...". to get to current state, log in as an admin and go to the home page. then click "browse postings" and click "Go!" on the top-most fuji apples posting. this brings you to a page where we want to see a list of all the tote_items associated with this posting. notice how there's a table showing quantity. the next thing i'm wanting to do is stick a checkbox on each row so admin can mark it "FILLED". i'm not sure how to do this. i know that i want an array of ids to get submitted to the deliveries controller but haven't done this yet. here's a tut that i think will get the job done: http://blog.endpoint.com/2011/11/performing-bulk-edits-in-rails-part-1.html

+make sure there's at least one admin in the seeds file
-when admin logs in make him see a link to "process deliveries" that gives him a list of live postings to select from
-admin selects posting which creates a Delivery instance and...
-takes him to the list of datetime-ordered toteitems where he can start to mark each as FILLED for later capture

2015-05-12
[state]
working on building the admin's delivery processing tool. i think it's pretty close. the idea is that the admin clicks 'fill & fetch' button and that simultaneously marks the existing tote_item as FILLED and fetches the next tote_item with state COMMITTED. this all works fine until you get to the end of the road, then you get a crash. i'm out of time to debug it but this is definitely the place to start tomorrow. to start the sequence go to the home page and click 'process delivery'. then click on the posting that you want to process a delivery for. this immediately takes you to the first tote_item to be filled. important: in the background when it pulled this ti from the queue it changed its state in the db from 'COMMITTED' to 'FILLPENDING'. then, when the admin clicks 'fill & fetch' it again changes the state from 'FILLPENDING' to 'FILLED'. before you start this sequence you should set all the states in the tote_items table properly with this:
update tote_items set status = 2 where status = 3
then verify there are some statuses of value '2' with this:
select * from tote_items
march through the 'fill & fetch' sequence outlined above and you'll see the crash at the end.

select * from tote_items
update tote_items set status = 2 where status = 3
update tote_items set status = 2 where status = 4

+let's see what the delivery stuff is/was supposed to do and consider scratching it
+let's check the code in before moving on to payments capture

2015-05-13
[state]
ok, i'm trying to do this:

"-let's set up a situation where customer adds many toteitems and authorizes, then admin fills many but is unable to fill many and then captures"

i set up a batch of paypal sandbox test accounts. the file for that is at the website root named "paypal*.txt". you can probably reseed the db but i'm trying to walk through from front to back. where i'm stuck is that when authorization happens it doesn't mark the tote_items as AUTHORIZED, as it should. so that's what i'm working on. my plan once that is done is to move on with the above-quoted task but i'll have to hack the db along they to dev and test. i'll have to manually set tote_items marked as AUTHORIZED to COMMITTED. at a later time i'll need to add the behind-the-scenes stuff that automatically adjusts tote_item state up to COMMITTED at the proper time.

if you look in authorizations_controller.rb you'll see this comment: #tote_item -> as/ti -> as -> auth
that shows what i can currently do. what i'm wanting to do is make it so that:
1) Authorization model has a .getAuthSetup method
2) AuthorizationSetup model has a .get_tote_items method

then in authorizations_controller.rb it will be easy to pull up the list of tote_items and stamp them. however, if i string along the db associations properly shouldn't i just be able to say auth.auth_setup.tote_items? right now i'm struggling my way through setting up these associations but maybe i need to slow down, study up and nail this one. i already built one migration but it's probably bogus. i can't tell...this pluralization stuff kills me.

2015-05-14
today i need to bone up my mastery of all things migrations, tables and associations. i need to set up a new rails sandbox project for manipulating these things. here goes...

2015-05-15
-get rid of "authorization_setup" from the entire project. replace with "checkout"
-auth_setup and auth_setup_tote_items data shouldn't be written to the db until after successfully coming back from a successful checkout

[state]
ok, i spent some time cleaning up the project management. from now on, each card in the backlog is just a "user story". this is why they all start with "US: " now. then each sub task gets stuck in a checklist item in the "US" card. the thinking is this will keep the backlog from becoming some huge bloated flat list of unassociated tasks. the thinking is that i only work on one US at a time and when i do i move it on to the sprint list and then, as necessary, i expand each checklist item out in to its own card so that i can really atomically break down the work and view and track progress. i'm currently working on "US: admin payments experience". if you open up that card i'm about to start item #4 in the description. so that's the first real work to get going monday morning. yesterday all i did was db clinic and today all i did was attempt to put it in to place. look in authorizations_controller.rb to see the fruit of my work. the idea was so that when i get an authorization response object back from paypal i can associate it with the checkout and transition each associated toteitem's state to AUTHORIZED. to continue developing the end to end sequence of payment i'm going to need to manually move the state of each toteitem from AUTHORIZED to COMMITTED. there is a different user story to make this transition happen automatically at the proper time. oh, one last thing...just reset the db to start monday's work but you might want to use these queries:

select * from authorizations
select * from authorization_setups
select * from authorization_setup_tote_items
select * from users where id = 6
select * from tote_items where user_id = 6

the '6' is because this is the user that had a bunch of toteitems whose state was ADDED that i walked through to the AUTHORIZED state.

2015-05-18
i'm working on determining what behavior i want when capturing customer payment. do I want to batch capture? sequential? what options does activemerchant provide?

[state]
ok, took a long time for me to get my wheels spinning today. i made a new seeds file called 'paymentCapture.rb'. then i used this to push the state of the db right up to where we can start developing the payment capture stuff. there's a 'captures_controller' now which needs to get fleshed out. the site can be used to walk customers through from shopping to authorizing, then we need to issue a sql command to bump their toteitems' state to COMMITTED. then the admin walks through the fill process which moves each toteitem's state to FILLED. so, to begin tuesday, look at captures_controller.rb. there's a comment in the 'index' action about how we use dates. currently the capture index view shows a link for 'show' and 'edit' but i think we should wait on both of those and for now just do a 'new' action. i think we should make a model object to store captures, which are just buckets of toteitems, the payment for which all happened in the same batch. bottom line: look at the db browser and notice how the toteitem statuss are all '4'. then look at http://localhost:3000/captures and get to work designing a model that can store captures, complete with which admin did it. the capture should probably have a 'amount' attribute etc.

ok update state. i left to go make casserole but it had 30 minute cook time so i came back up to do some more stuff. scratch the 'index' stuff for now. for now just do 'new'. the way to do it is on the home page, make the "capture payments" just link_to the 'new' Capture action. add some comments to the 'index' action to the effect that we're scrapping that feature for now but that when we come back to it we want for admin to be able to peruse a list of historical capture events. i just added the 'new' action in the controller but not even positive it should remain. just go from there...

2015-05-19
[state]
super painful day. everything was so arduous. anyway, i'm trying render the new action for captures. i'm wanting to show a table (of sorts) depicting the info i have on the yellow sheet on the clipboard. right now i'm just trying to display the authorization amount which is the sum of user id groups of price * quantity. i was stuck trying to create the new Capture object in the CaptureController, populating its tote_items and handing it off to the view, then in the view doing the necessary grouping to show the sum amounts. the reason i couldn't get it to work was because the tote_items aren't yet associated in the db with the capture object since the capture object is so new. this makes some methods like .where and .sum not work right. so i hacked up the controller's new action to pass over an array object called @tote_items. to prove to myself that it works i'm displaying the sum of all the prices of products ordered on a per user basis. but since they all ordered some of the same kind of proudct it just shows the same amount for every row. no problem. wednesday's task is to multiply the price * quantity and display that. for now, it's chicken cordon bleu!

2015-05-22
+get toteitems associated with a capture? no, don't want to do this until the admin actually does the capture.
-get tote item amounts subtotaled by customer
-show cumulative capture amount

[state]
very frustrating end to a very frustrating week. just look in the captures/new.html.erb file to see what i'm doing. i'm wanting to have admin start at home page and click "capture payments" and when this goes through to the above-referenced file trying to query the @tote_items object to show subtotals on a per user basis. the step i'd like to see now is just querying the toteitems object with a select, selecting the 'price' and 'quantity' columns but then also doing a 'dynamic' column in the returned Relation that has a 'cost' column that is a multiplication of the price and quantity cols. in the .erb file you can see all the commented out lines of stuff i've tried. i've come across SOF postings saying you can do a rails .select call and just put raw sql in there with an ...as 'cost' substring. when i do this i don't get an exception but using the debugger i get a Relation that does not contain the aliased column. unsure which direction to proceed.

2015-05-25
[state]
ok, had to play some air guitar after today. first, i brute-forced up some by-user totals on the capture page. then i implemented eric's suggestions to make everything many-to-many. i had a big 'aha' moment when creating join tables. i think in the future i have this nailed. on the ubuntu desktop i created a file called 'howtojointable.txt' or something like that that gives everything i need to whip these out in the future. ok, so the plan is that when admin is on home page and clicks "capture payments" it's going to the Captures#new action which will create a new capture object and store it to the database. it will also create a whole pile of capture_tote_items entries before showing the new captures view page.

Experimenting around with the following sql queries is instructive:
select * from capture_tote_items
select * from tote_items
select * from captures

there's presently a 'debugger' line in the new.html.erb file. if you hit this breakpoint and examine @capture you see it has a legit id. here are some ttds going forward

-fill in the amount of the capture column in the captures table
-nuke the capture_id column in the tote_items table
-need to create a column for state in the captures table
-need to set captures state appropriately
+nuke the extraneous columns in the captures_tote_items table
+how can we make join table names be relationship based rather than tables-joined based?

2015-05-26
+can we make it so that a capture isn't saved on the 'new' action?

-redo authsetup -> checkout
-nuke the capture-toteitem link
-we're going to make it so that captures have many purchases and purchases have many toteitems

[state]
ok you can ignore everything in today's log besides this. i'm in the middle of a big db mobel overhaul. i've always hated the 'authorization_setups' junk that really should have been called 'checkout' from the beginning. and it was a nightmare trying to remember which had what. so i'm in the middle of gutting this all and implementing the model i have sketched out currently sitting on the laptop keyboard. it goes:

tote_item <-> checkout <-> authorization <-> purchase <-> bulk_buy

between each of those is a join table with a has_many relationship so you can traverse in any direction you want. i'm currently stopped pondering if i need the explicit tote_item state management stuff. if i wanted to know if a tote_item was authorized i could say tote_item.checkouts.last.authorizations.any?, couldn't i? likewise a tote_item would be FILLED if tote_item.checkouts.last.authorizations.last.purchase.any?, right? but how would i efficiently tell if a tote_item was NOTFILLED and therefore in need of a notification to that effect? my hand is being forced on this issue as i rewrite the admin fill-processing code. to continue, look at tote_items_controll#next action and carry on.

2015-05-27
+let's take a look at the various tote_item states to see which are redundant to the new db tables


[state]
just ripped out a ton of code in bulk_buys_controller. i have a crash which is up right now. the error message is 

ActiveModel::MissingAttributeError (can't write unknown attribute `admin_id`):
  app/controllers/bulk_buys_controller.rb:25:in `create'

so this has to do with trying to record who the admin is when the 'admin' is really a User instance. ugh. hate this. this is where to pick up tomorrow.

2015-05-27
+check in code
+nuke *capture*
+nuke authorization_setup_id column from authorizations table
-check in code
-need to test a large delay between auth -> capture

+see what speed is like for many-purchase bulk_buy (about 2 seconds per purchase)

to test admin's bulk buy feature:
1) blank the database
2) seed the db
3) log in to each customer and walk through the pp auth process
4) update tote_items set status = 4 where status = 1
4 alt) update tote_items set status = 4 where status = 1 and ( user_id = 5 or user_id = 10 )
5) log in as admin
6) go to home page
7) click 'do bulk buy'
8) click 'capture payments'

#TODO: in the tote view where customer has option to hit the paypal checkout button there's a table with info with a cost column. i once saw a number with a 1 out about 10 places to the righ tof the decimal. not good.